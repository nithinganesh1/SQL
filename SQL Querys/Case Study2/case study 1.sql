create database as1

use as1

select * from fact
select * from Product
select * from LOCATION

--Q1.
----Display number of states present in location table?
select COUNT(*) as Num_of_states from LOCATION


--Q2.
----How many products are of regular type ?
select count(Product)as no_of_products_in_regular from Product
where type='Regular'

--Q3.
----How much spending has been done on marketing of product id 1
alter table fact
alter column marketing int

select sum(Marketing) as [no of spending done on pruduct1] from fact
group by ProductId
having ProductId=1


--Q4.
----What is the minimum sales of a product ?
Alter Table FAct
alter column COGS int

select min(sales) as min_sales_product from fact

--Q5.
----Display max Cost of Good Sold(COGS). 
Alter Table FAct
alter column COGS int

select max(COGS) Max_Sold_COGS from fact

--6.
----Display the Details of the productid where product type is coffee
select * from Product
where [Product Type]='Coffee'


--Q7.
----Display the details where total_expenses is greater than 40.
alter table fact
alter column [Total Expenses] int

select * from fact
where [Total Expenses]>40


---Q8.
----What is the average sales in Area_Code 719 ?
alter table fact
alter column sales int

select avg(sales) AVG_SAlES from Fact
where [Area Code]=719


--Q9.
----Find out the total profit generated by Colorado state. 
alter table fact
alter column profit int
alter table fact 
alter column [area code] int
alter table location 
alter column [area code] int

select sum(profit) sum_profit from fact
join Location on Location.[Area Code] = fact.[Area Code]
where State='colorado'


--10.
----Display the average inventory for each product 
alter table fact
alter column inventory int

select  productId,avg(inventory) avg_inventory from fact
group by ProductId

--Q11. Display state in a sequential order in a location table. 
select * from Location
order by State 


--Q12. Display the average budget margin where average budget margin should be greater than 100
alter table fact
alter column [Budget Margin] int

SELECT AVG([Budget Margin]) AS Average_Budget_Margin 
FROM [fact] 
where [Budget Margin] > 100


--Q13. What is the total sales done on date 2010-01-01
alter table fact
alter column Date Date

select sum(sales) sum_of_sales from fact
where Date='2010-01-01'

--Q14. Display the average total expense of each product id on individual date
alter table fact
alter column productid int

SELECT productId, date, AVG([Total Expenses]) as average_expense
FROM fact
GROUP BY ProductId,date
order by ProductId

--Q15. Display the table with the following attributes such as Date, productid, product_type, product, Sales, profit, state, area_code
select * from fact

--Q16. Display the rank without any gap to show the Sales wise rank.
select *,RANK() OVER (ORDER BY sales DESC) as sales_rank from fact

--Q17. Find the State wise Profit and Sales.
select state,sum(sales) Total_Sales, sum(profit) Total_Profit from fact
join Location on fact.[Area Code]=Location.[Area Code]
group by State


--Q18. Find the State wise Profit and Sales along with the Product Name.
select state,product,sum(sales) Total_Sales, sum(profit) Total_Profit from fact
join Location on fact.[Area Code]=Location.[Area Code] join Product on fact.ProductId=Product.ProductId
group by State,Product


--Q19. If there is an increase in sales of 5%. Calculate the increased sales. 
alter table fact
add Increased_sales int
UPDATE fact
SET increased_sales = sales * 0.05

select * from fact

--Q20. Find the maximum profit along with the Product id and Product Type.
SELECT TOP 1 fact.ProductId, [Product type], MAX(Profit) as Max_Profit FROM fact 
join Product on Product.ProductId = fact.ProductId
GROUP BY fact.Productid, [Product type]
ORDER BY Max_Profit DESC


--Q21. Create a Stored Procedure to fetch the result according to the product type from Product.
create procedure procedure1  @product_type varchar(10)
as    
select * from Product
where [Product Type] = @product_type
go

exec procedure1 @product_type='coffee'

--Q22. Write a query by creating a condition in which if the total expenses is less than 60 then it is aprofit or else loss.
SELECT [total expenses], 
CASE WHEN [total expenses] < 60 THEN 'Profit' ELSE 'Loss' END AS Result
FROM fact

--Q23. Give the total weekly sales value with the Date and productid details. Use roll-up to pull the data in hierarchical order.
SELECT productID, DATEPART(wk, date) AS week_number, SUM(sales) AS weekly_sales
FROM fact
GROUP BY ROLLUP (productID, DATEPART(wk, date))

--Q24. Apply union and intersection operator on the tables which consist of attribute area code.
select [Area Code] from fact
union
select [Area Code] from Location

--Q25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
CREATE FUNCTION fun1 (@productType VARCHAR(10))
RETURNS TABLE
AS
RETURN (
    SELECT * FROM product
    WHERE [Product Type] = @productType
)

SELECT * FROM fun1('coffee')


--Q26. Change the product type from coffee to tea where product id is 1 and undo it.
UPDATE product
SET [Product Type] = 'tea'
WHERE productid =1

select * from Product
where [Product Type]='tea'

UPDATE product
SET [Product Type] = 'coffee'
WHERE productid =1

select * from Product
where [Product Type]='tea'

--Q27. Display the Date, productid and sales where total expenses are between 100 to 200. 
select date,productid,sales from fact
where [Total Expenses] between 100 and 200

--Q28. Delete the records in the product table for regular type.
delete from Product
where type='regular'

select * from Product

--Q29. Display the ASCII value of the fifth character from the column product
SELECT ASCII(SUBSTRING(product, 5, 1)) AS ascii_value FROM product
